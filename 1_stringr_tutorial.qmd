---
title: 'Text analysis workshop: stringr package and regex'
author: "Casey O'Hara"
format: 
  html:
    toc: true
    number-sections: true
    embed-resources: true
execute:
  warning: false
  message: false
---

# Overview

This tutorial will walk through an exercise in extracting specific information from untidily formatted blocks of text, i.e. sentences and paragraphs rather than a nice data frame or .csv.  

The example comes from a paper I led that examined species ranges from different datasets, and found some discrepancies that resulted from systematic errors.  Many of the coral species ranges for IUCN rangemaps extended off the continental shelf into very deep waters; but most corals require shallower water and are dependent upon photosynthesis.  So I wanted to examine whether these corals, according to the IUCN's own information, could be found in waters deeper than 200 meters.


# Load packages and data

The data are narratives pulled from the IUCN API (http://apiv3.iucnredlist.org/) for coral species, in order to identify their maximum depth.  We'll also pull up a set of data on species areas, but mostly just because that data includes scientific names for the corals so we can refer to species rather than ID numbers.

``` {r} 
library(tidyverse)
# library(stringr)

### original dataset from the manuscript is here:
# data_dir <- 'https://raw.githubusercontent.com/OHI-Science/IUCN-AquaMaps/master/clip_depth'

coral_narrs <- read_csv('data/iucn_narratives.csv')
# head(coral_narrs)
### interested in species_id, habitat
coral_info <- read_csv('data/coral_spp_info.csv')
# head(coral_info)
### info for species mapped in both datasets

### create a dataframe with just ID, scientific name, and habitat
coral_habs_raw <- coral_narrs %>%
  left_join(coral_info, by = 'iucn_sid') %>%
  select(iucn_sid, sciname, habitat)
```

## examine a few habitat descriptions

``` {r}
coral_habs_raw$habitat[1:2]
```

# How can we extract depth information from these descriptions?

In pseudocode, we can think of a process as:

```r
coral_habs <- coral_habs_raw %>%
  split into individual sentences %>%
  keep the sentences with numbers in them %>%
  isolate the numbers
```
  
# Intro to `stringr` functions

Here we'll play a little with some basic stringr functions, and pattern vs. vector of strings.  Consider especially how we can use `str_split`, `str_detect`, `str_replace`; later we'll see how to make effective use of `str_extract` as well.

- `str_match`, `str_match_all`
- `str_detect`
- `str_split`
- `str_replace`, `str_replace_all`
- `str_subset`, `str_count`, `str_locate`
- `str_trim`, `tolower`, `toupper`, `tools::toTitleCase`

``` {r}
x <- "Everybody's got something to hide except for me and my monkey"
stringr::str_to_title(x)
str_to_lower(x)

str_split(x, 'hide'); str_split(x, 't')

str_replace(x, 'except for', 'including')
str_replace(x, ' ', '_')
str_replace_all(x, ' ', '_')

str_detect(x, 't'); str_detect(x, 'monk') ### is pattern in the string? T/F

str_match(x, 't'); str_match_all(x, 'y')  ### return every instance of the pattern in the string
  ### more useful when using wildcards as a pattern...

str_extract(x, 't'); str_extract_all(x, 'y')  ### return every instance of the pattern in the string
  ### more useful when using wildcards as a pattern...

str_locate(x, 't'); str_locate_all(x, 'y')
```

# Use `stringr` functions on coral data

First we can use `stringr::str_split()` to break down the habitat column into manageable chunks, i.e. sentences.  What is an easily accessible delimiter we can use to separate a paragraph into sentences?

### Take 1:

``` {r}

coral_habs <- coral_habs_raw %>%
  mutate(hab_cut = str_split(habitat, '.'))


coral_habs$hab_cut[1]
```

Well that didn't work!  In a moment we'll see that a period is actually a special character we will later use as a wild card in a "regular expression" or "regex" pattern.  Some other characters have special uses as well; so if we want them to be interpreted literally, we need to "escape" them.  

Some languages use a single backslash to escape a character (or turn a letter into a special function, e.g. '\\n' indicates a line break).  In R stringr functions, usually you end up having to use a double backslash (e.g. to get this to render a backslash-n, I had to type an extra backslash that doesn't show up)

Also: why is just separating on a period probably a bad idea?  what else could we use?

### Take 2:

``` {r}
# coral_habs <- coral_habs_raw %>%
#   mutate(hab_cut = str_split(habitat, '\. '))
### Error: '\.' is an unrecognized escape in character string starting "'\."

coral_habs <- coral_habs_raw %>%
  mutate(hab_cut = str_split(habitat, '\\. '))
### creates a cell with a vector of broken up sentences!

```

![](expert_regex.jpg)
